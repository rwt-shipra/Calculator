[{"/Users/shipra/Desktop/calculator/src/index.js":"1","/Users/shipra/Desktop/calculator/src/components/Calculator/Calculator.js":"2","/Users/shipra/Desktop/calculator/src/components/Display/Display.js":"3"},{"size":265,"mtime":1609848017796,"results":"4","hashOfConfig":"5"},{"size":9790,"mtime":1610391746386,"results":"6","hashOfConfig":"5"},{"size":328,"mtime":1610014071028,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"hf0hap",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shipra/Desktop/calculator/src/index.js",[],["16","17"],"/Users/shipra/Desktop/calculator/src/components/Calculator/Calculator.js",["18","19"],"import React, {useState }from \"react\";\nimport calCss from \"./Calculator.module.scss\";\nimport Display from \"../Display/Display\";\n\n   \n// this regex is used to do what\nconst REGEX = /[*/+-]/;\nconst Regex1 = /[?*/+]/;\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayNumber: [],\n      calCulatedValue: 0,\n      prevVal: 0,\n    };\n    this.opration = \"\";\n    this.operationsClickHandler = this.operationsClickHandler.bind(this);\n    this.calculateHandler = this.calculateHandler.bind(this);\n    this.maxDigitWarning = this.maxDigitWarning.bind(this);\n    this.numbersClickHandler = this.numbersClickHandler.bind(this);\n    this.clearButtonHandler = this.clearButtonHandler.bind(this);\n  }\n\n  findEventValue=(e)=>{\n    switch(e.key){\n      case String((e.key).match(/^\\d+$/)):\n        this.numbersClickHandler(e.key);\n        break;\n      case String((e.key).match(REGEX)):\n          this.operationsClickHandler(e.key);\n          break;\n      case \"=\":\n        this.calculateHandler();\n        break;\n      case \"Enter\":\n          this.calculateHandler();\n          break;\n      default:\n        console.log(\"You are in default section\")\n    }\n  }\n\n  BackSpaceEventHandler=(e)=>{\n      if(e.key === \"Backspace\"){this.clearLastValueHandler();}\n  }\n\n  componentDidMount(){\n    window.addEventListener(\"keypress\",this.findEventValue)\n    window.addEventListener(\"keydown\",this.BackSpaceEventHandler)\n  }\n  componentWillUnmount(){\n    window.removeEventListener(\"keypress\",this.findEventValue);\n    window.addEventListener(\"keydown\",this.BackSpaceEventHandler);\n  }\n  numbersClickHandler = (e) => {\n    let displayNumber = [...this.state.displayNumber];\n    let displaylength = displayNumber.length - 1;\n    let tempDisplay = displaylength >= 0 && displayNumber[displaylength];\n    let number = e.target ===undefined ?e : e.target.value;\n    if (tempDisplay.length < 9 || tempDisplay.length === undefined) {\n      displayNumber.length === 0 || REGEX.test(displayNumber[displaylength])\n        ? displayNumber.push(number)\n        : (displayNumber[displaylength] =\n            displayNumber[displaylength] + number);\n      this.setState({\n        displayNumber: displayNumber,\n      });\n    } else {\n      this.maxDigitWarning();\n    }\n  };\n  maxDigitWarning = () => {\n    this.setState({\n      prevVal: this.state.displayNumber,\n      displayNumber: \"Digit limit\",\n    });\n    setTimeout(() => {\n      this.setState({\n        displayNumber: this.state.prevVal,\n      });\n    }, 1000);\n  };\n\n  clearButtonHandler = () => {\n    \n    this.setState({ displayNumber: [], calCulatedValue: 0 });\n  };\n  clearLastValueHandler=()=>{\n    let displayNumber = [...this.state.displayNumber];\n    displayNumber = displayNumber.slice(0,-1);\n    this.setState({ displayNumber:displayNumber});\n  }\n  operationsClickHandler = (number) => {\n    let { calCulatedValue } = this.state;\n    let displayNumber = [...this.state.displayNumber];\n    let displaylength = displayNumber.length - 1;\n    if (!REGEX.test(displayNumber[displaylength])) {\n      displayNumber.push(number);\n    } else if (Regex1.test(displayNumber[displaylength])) {\n      number === \"-\"\n        ? (displayNumber[displaylength] += number)\n        : (displayNumber[displaylength] = number);\n    } else if (displayNumber[displaylength] === \"-\") {\n      displayNumber = displayNumber.slice(0, displaylength);\n      displayNumber.push(number);\n    } else {\n      displayNumber[displaylength] = number;\n    }\n    this.setState({\n      displayNumber: displayNumber,\n      calCulatedValue: calCulatedValue,\n    });\n  };\n  modeClickHandler=()=>{\n    let displayNumber = [...this.state.displayNumber];\n    displayNumber = parseFloat(displayNumber.join(\"\")) / 100;\n    this.setState({\n        displayNumber: displayNumber,\n      });\n  }\n\n  calculateHandler = () => {\n    let outPut = 0;\n    let displayNumber = [...this.state.displayNumber];\n    let displaylength = displayNumber.length - 1;\n    displayNumber = REGEX.test(displayNumber[displaylength])\n      ? displayNumber.slice(0, -1)\n      : displayNumber;\n    outPut =\n      Math.round(1000000000000 * eval(displayNumber.join(\"\"))) / 1000000000000;\n    // outPut=outPut.toLocaleString('en-IN',{maximumSignificantDigits:3})\n    displayNumber = [];\n    displayNumber.push(outPut);\n    this.setState({ displayNumber: displayNumber });\n  };\n  render() {\n    const { displayNumber } = this.state;\n    let tempView =\n      typeof displayNumber === \"object\"\n        ? displayNumber.length === 0\n          ? 0\n          : displayNumber.join(\"\")\n        : displayNumber;\n\n    let singleDecimal = /[.]/.test(displayNumber[displayNumber.length - 1]);\n    return (\n      <div className={calCss.wrapper}>\n          <Display  view={tempView}>\n          </Display>\n        <div className={calCss.buttonDivs}>\n          <div>\n            <button\n              className={calCss.clearStyle}\n              onClick={() =>\n                displayNumber.length !== 0 && this.clearButtonHandler()\n              }\n              id=\"clear\"\n            >\n              AC\n            </button>\n            <button\n              className={calCss.clearStyle}\n              onClick={() =>\n                displayNumber.length !== 0 && this.clearLastValueHandler()\n              }\n              id=\"clearLastValue\"\n            >\n              C\n            </button>\n            <button\n              className={calCss.modeStyle}\n              onClick={() =>\n                displayNumber.length !== 0 && this.modeClickHandler()\n              }\n              id=\"mode\"\n            >\n            %\n            </button>\n            <button\n              className={calCss.operatorStyle}\n              onClick={() =>\n                displayNumber.length !== 0 && this.operationsClickHandler(\"/\")\n              }\n              id=\"divide\"\n              data-testid=\"divide\"\n            >\n              &#xf7;\n            </button>\n            \n          </div>\n          <div>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"7\"\n              id=\"seven\"\n            >\n              7\n            </button>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"8\"\n              id=\"eight\"\n            >\n              8\n            </button>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"9\"\n              id=\"nine\"\n            >\n              9\n            </button>\n            <button\n              className={calCss.operatorStyle}\n              onClick={() =>\n                displayNumber.length !== 0 && this.operationsClickHandler(\"*\")\n              }\n              id=\"multiply\"\n            >\n             x\n            </button>\n            \n          </div>\n          <div>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"4\"\n              id=\"four\"\n            >\n              4\n            </button>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"5\"\n              id=\"five\"\n            >\n              5\n            </button>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"6\"\n              id=\"six\"\n            >\n              6\n            </button>\n            <button\n              className={calCss.operatorStyle}\n              onClick={() =>\n                displayNumber.length !== 0 && this.operationsClickHandler(\"+\")\n              }\n              id=\"add\"\n            >\n              +\n            </button>\n          </div>\n          <div>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"1\"\n              id=\"one\"\n            >\n              1\n            </button>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"2\"\n              id=\"two\"\n            >\n              2\n            </button>\n            <button\n              className={calCss.inputButton}\n              onClick={this.numbersClickHandler}\n              value=\"3\"\n              id=\"three\"\n            >\n              3\n            </button>\n            <button\n              className={calCss.operatorStyle}\n              onClick={() =>\n                displayNumber.length !== 0 && this.operationsClickHandler(\"-\")\n              }\n              id=\"subtract\"\n            >\n              -\n            </button>\n          </div>\n          <div>\n            <button\n              className={calCss.zeroButton}\n              onClick={(event) => {\n                displayNumber.length !== 0 && this.numbersClickHandler(event);\n              }}\n              value=\"0\"\n              id=\"zero\"\n            >\n              0\n            </button>\n            <button\n            className={calCss.inputButton}\n              onClick={() =>\n                displayNumber.length !== 0 && singleDecimal === false\n                  ? this.operationsClickHandler(\".\")\n                  : \"\"\n              }\n              id=\"decimal\"\n            >\n              .\n            </button>\n            <button\n              onClick={displayNumber.length !== 0 ? this.calculateHandler : undefined}\n              id=\"equals\"\n              className={calCss.operatorStyle}\n            >\n              =\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","/Users/shipra/Desktop/calculator/src/components/Display/Display.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":1,"column":16,"nodeType":"26","messageId":"27","endLine":1,"endColumn":24},{"ruleId":"28","severity":1,"message":"29","line":131,"column":34,"nodeType":"30","messageId":"31","endLine":131,"endColumn":38},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]